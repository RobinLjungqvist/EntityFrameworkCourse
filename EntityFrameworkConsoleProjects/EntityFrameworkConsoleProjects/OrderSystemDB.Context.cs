//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityFrameworkConsoleProjects
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OrderSystemEntities : DbContext
    {
        public OrderSystemEntities()
            : base("name=OrderSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tblCity> tblCity { get; set; }
        public virtual DbSet<tblCustomer> tblCustomer { get; set; }
        public virtual DbSet<tblManufacturer> tblManufacturer { get; set; }
        public virtual DbSet<tblOrder> tblOrder { get; set; }
        public virtual DbSet<tblOrder_Product> tblOrder_Product { get; set; }
        public virtual DbSet<tblPictures> tblPictures { get; set; }
        public virtual DbSet<tblPostalCode> tblPostalCode { get; set; }
        public virtual DbSet<tblProduct> tblProduct { get; set; }
        public virtual DbSet<tblShippingCompany> tblShippingCompany { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_BiggestOrder_Result> usp_BiggestOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BiggestOrder_Result>("usp_BiggestOrder");
        }
    
        public virtual int usp_InsertImage(string imgFilePath)
        {
            var imgFilePathParameter = imgFilePath != null ?
                new ObjectParameter("imgFilePath", imgFilePath) :
                new ObjectParameter("imgFilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertImage", imgFilePathParameter);
        }
    
        public virtual ObjectResult<usp_ListAllOrders_Result> usp_ListAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListAllOrders_Result>("usp_ListAllOrders");
        }
    
        public virtual ObjectResult<usp_MostExpensiveOrder_Result> usp_MostExpensiveOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MostExpensiveOrder_Result>("usp_MostExpensiveOrder");
        }
    
        public virtual ObjectResult<usp_NumberOfOrdersPerShippingCompany_Result> usp_NumberOfOrdersPerShippingCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NumberOfOrdersPerShippingCompany_Result>("usp_NumberOfOrdersPerShippingCompany");
        }
    
        public virtual ObjectResult<usp_OrdersOfCustomer_Result> usp_OrdersOfCustomer(string customerLastName)
        {
            var customerLastNameParameter = customerLastName != null ?
                new ObjectParameter("CustomerLastName", customerLastName) :
                new ObjectParameter("CustomerLastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrdersOfCustomer_Result>("usp_OrdersOfCustomer", customerLastNameParameter);
        }
    
        public virtual ObjectResult<usp_ProductsByManufacturer_Result> usp_ProductsByManufacturer(string nameOfManufacturer)
        {
            var nameOfManufacturerParameter = nameOfManufacturer != null ?
                new ObjectParameter("NameOfManufacturer", nameOfManufacturer) :
                new ObjectParameter("NameOfManufacturer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductsByManufacturer_Result>("usp_ProductsByManufacturer", nameOfManufacturerParameter);
        }
    
        public virtual ObjectResult<usp_SearchOrdersFromShippingCompany_Result> usp_SearchOrdersFromShippingCompany(string companyName)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchOrdersFromShippingCompany_Result>("usp_SearchOrdersFromShippingCompany", companyNameParameter);
        }
    
        public virtual ObjectResult<usp_ShippingOrdersOnThisDate_Result> usp_ShippingOrdersOnThisDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ShippingOrdersOnThisDate_Result>("usp_ShippingOrdersOnThisDate", dateParameter);
        }
    }
}
